apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-all-except-system-config
  namespace: logging
data:
  fluent.conf: |
    # All Namespaces Except System Configuration
    # Collects logs from all namespaces except Kubernetes system namespaces
    
    # Source: All container logs except system namespaces
    <source>
      @type tail
      path /var/log/containers/*.log
      exclude_path ["/var/log/containers/fluentd*.log", "/var/log/containers/*_kube-system_*.log", "/var/log/containers/*_kube-public_*.log", "/var/log/containers/*_kube-node-lease_*.log", "/var/log/containers/*_logging_*.log"]
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      <parse>
        @type regexp
        expression /^(?<time>.+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$/
        time_format %Y-%m-%dT%H:%M:%S.%N%:z
      </parse>
    </source>

    # Add Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url "#{ENV['KUBERNETES_URL']}"
      verify_ssl "#{ENV['KUBERNETES_VERIFY_SSL']}"
      ca_file "#{ENV['KUBERNETES_CA_FILE']}"
      skip_labels false
      skip_container_metadata false
      skip_master_url false
      skip_namespace_metadata false
    </filter>

    # Exclude system namespaces as safety filter
    <filter kubernetes.**>
      @type grep
      <exclude>
        key $['kubernetes']['namespace_name']
        pattern ^(kube-system|kube-public|kube-node-lease|logging|local-path-storage)$
      </exclude>
    </filter>

    # Add comprehensive metadata for routing
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      <record>
        cluster_namespace ${record['kubernetes']['namespace_name']}
        app_name ${record['kubernetes']['labels']['app'] || record['kubernetes']['labels']['k8s-app'] || 'generic'}
        full_index_name ${record['kubernetes']['namespace_name']}-${record['kubernetes']['labels']['app'] || record['kubernetes']['labels']['k8s-app'] || 'generic'}
        log_level ${record['log'].match(/\b(DEBUG|INFO|WARN|ERROR|FATAL)\b/) ? record['log'].match(/\b(DEBUG|INFO|WARN|ERROR|FATAL)\b/)[0] : 'UNKNOWN'}
        @timestamp ${Time.now.strftime('%Y-%m-%dT%H:%M:%S.%3NZ')}
      </record>
    </filter>

    # Parse AUDIT logs from any namespace
    <filter kubernetes.**>
      @type parser
      key_name log
      reserve_data true
      <parse>
        @type grok
        grok_pattern \[AUDIT\]\s*user=(?<User>[^,]+),\s*action=(?<Action>[^,]+),\s*project=(?<Project>[^,]+),\s*status=(?<Status>[^,]+),\s*Field=(?<Field>[^,]+),\s*old_value=(?<Old_value>[^,]+),\s*new_value=(?<New_value>.+)
      </parse>
    </filter>

    # Route logs by type and namespace
    <match kubernetes.**>
      @type rewrite_tag_filter
      <rule>
        key log
        pattern /\[AUDIT\]/
        tag audit.${record['cluster_namespace']}
      </rule>
      <rule>
        key log_level
        pattern ERROR|FATAL
        tag error.${record['full_index_name']}
      </rule>
      <rule>
        key full_index_name
        pattern (.+)
        tag app.${1}
      </rule>
    </match>

    # Output 1: All AUDIT logs to centralized index
    <match audit.**>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      index_name cluster-audit-trail
      suppress_type_name true
      
      <buffer>
        @type file
        path /var/log/fluentd-buffers/cluster-audit
        flush_mode interval
        flush_interval 5s
        retry_max_times 5
        chunk_limit_size 10MB
      </buffer>
    </match>

    # Output 2: Error logs to dedicated error index
    <match error.**>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      index_name cluster-errors
      suppress_type_name true
      
      <buffer>
        @type file
        path /var/log/fluentd-buffers/errors
        flush_mode interval
        flush_interval 5s
        retry_max_times 5
        chunk_limit_size 5MB
      </buffer>
    </match>

    # Output 3: Application logs by namespace-app
    <match app.**>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      index_name ${tag[1]}
      suppress_type_name true
      
      <buffer tag>
        @type file
        path /var/log/fluentd-buffers/apps
        flush_mode interval  
        flush_interval 10s
        retry_max_times 3
        chunk_limit_size 5MB
      </buffer>
    </match>

    # Drop Fluentd internal logs
    <match fluent.**>
      @type null
    </match>

    # Output 4: Fallback for any remaining logs
    <match **>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      index_name cluster-generic
      suppress_type_name true
      
      <buffer>
        @type file
        path /var/log/fluentd-buffers/fallback
        flush_mode interval
        flush_interval 15s
        retry_max_times 3
        chunk_limit_size 5MB
      </buffer>
    </match>