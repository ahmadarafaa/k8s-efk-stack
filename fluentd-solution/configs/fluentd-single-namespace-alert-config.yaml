apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-single-namespace-alert-config
  namespace: logging
data:
  fluent.conf: |
    # Source: Tail container logs from logging-test namespace
    <source>
      @type tail
      path /var/log/containers/*_logging-test_*.log
      exclude_path ["/var/log/containers/fluentd*.log"]
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      <parse>
        @type regexp
        expression /^(?<time>.+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$/
        time_format %Y-%m-%dT%H:%M:%S.%N%:z
      </parse>
    </source>

    # Add Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url "#{ENV['KUBERNETES_URL']}"
      verify_ssl "#{ENV['KUBERNETES_VERIFY_SSL']}"
      ca_file "#{ENV['KUBERNETES_CA_FILE']}"
      skip_labels false
      skip_container_metadata false
      skip_master_url false
      skip_namespace_metadata false
    </filter>

    # Filter only logging-test namespace
    <filter kubernetes.**>
      @type grep
      <regexp>
        key $['kubernetes']['namespace_name']
        pattern ^logging-test$
      </regexp>
    </filter>


    # Add target index field and timestamp
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      <record>
        target_index ${record['kubernetes']['labels']['app'] || 'generic'}
        @timestamp ${Time.now.strftime('%Y-%m-%dT%H:%M:%S.%3NZ')}
      </record>
    </filter>

    # Parse ALERT log message into structured fields
    <filter kubernetes.**>
      @type parser
      key_name log
      reserve_data true
      <parse>
        @type grok
        grok_pattern ALERT\s*user=(?<User>[^,]+),\s*action=(?<Action>[^,]+),\s*status=(?<Status>[^,]+),\s*Field=(?<Field>[^,]+),\s*original=(?<Original>[^,]+),\s*updated=(?<Updated>.+)
      </parse>
    </filter>

    # Route ALERT logs first
    <match kubernetes.**>
      @type rewrite_tag_filter
      <rule>
        key log
        pattern /ALERT/
        tag alert.logs
      </rule>
      <rule>
        key target_index
        pattern (.+)
        tag app.${1}
      </rule>
    </match>

    # Output 1: ALERT logs to alerts_logging-test index
    <match alert.logs>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      index_name alerts_logging-test
      suppress_type_name true
      
      <buffer>
        @type file
        path /var/log/fluentd-buffers/alert
        flush_mode interval
        flush_interval 10s
        retry_max_times 3
        chunk_limit_size 5MB
      </buffer>
    </match>

    # Output 2: App-specific logs - use record field for dynamic index
    <match app.**>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      # Use the target_index field from the record
      index_name ${target_index}
      suppress_type_name true
      
      <buffer target_index>
        @type file
        path /var/log/fluentd-buffers/apps
        flush_mode interval  
        flush_interval 10s
        retry_max_times 3
        chunk_limit_size 5MB
      </buffer>
    </match>

    # Drop Fluentd internal logs completely
    <match fluent.**>
      @type null
    </match>

    # Output 3: Fallback for any remaining logs
    <match **>
      @type elasticsearch
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      user "#{ENV['ELASTICSEARCH_USERNAME']}"
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      scheme "#{ENV['ELASTICSEARCH_SCHEME']}"
      ssl_verify false
      
      index_name generic-logs
      suppress_type_name true
      
      <buffer>
        @type file
        path /var/log/fluentd-buffers/fallback
        flush_mode interval
        flush_interval 10s
        retry_max_times 3
        chunk_limit_size 5MB
      </buffer>
    </match>